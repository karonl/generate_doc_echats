'use strict';

class Column {
    constructor(column, baseConfig, parent = null, deep = 1) {
        this.textWidth = 0;
        this.deep = 1;
        this.colSpan = 1;
        const config = Object.assign(Object.assign({}, baseConfig), column);
        const { width, height } = config;
        this.width = width;
        this.height = height;
        this.column = column;
        this.baseConfig = baseConfig;
        this.config = config;
        this.parent = parent;
        this.deep = deep;
    }
}
function genColumns(columns, baseConfig, parent = null, deep = 1) {
    var _a, _b;
    const list = [];
    for (const item of columns) {
        const instance = new Column(item, baseConfig, parent, deep);
        if ((_a = item.children) === null || _a === void 0 ? void 0 : _a.length) {
            instance.children = genColumns(item.children, baseConfig, instance, deep + 1);
        }
        if ((_b = instance.children) === null || _b === void 0 ? void 0 : _b.length) {
            const columns = flatColumns(instance.children);
            let width = 0;
            for (const item of columns) {
                width += item.width;
            }
            instance.width = width;
        }
        instance.textWidth = instance.width - baseConfig.padding[3] - baseConfig.padding[1];
        list.push(instance);
    }
    setThHeight(list, baseConfig.height);
    return list;
}
/**
 * 获取children或者本身的最后一层数据集合
 * @param columns
 * @returns
 */
function flatColumns(columns) {
    var _a;
    const list = [];
    for (const column of columns) {
        if ((_a = column.children) === null || _a === void 0 ? void 0 : _a.length) {
            list.push(...flatColumns(column.children));
        }
        else {
            list.push(column);
        }
    }
    return list;
}
/**
 * 设置每个th的高度
 * @param columns 当前所有的column
 * @param baseHeight 基本配置项中的高度
 * @param height 当前th的必然高度
 */
function setThHeight(columns, baseHeight, height) {
    var _a, _b;
    const maxRowNum = Math.max(...flatColumns(columns).map(v => v.deep));
    if (typeof height === 'number') {
        for (const item of columns) {
            if ((_a = item.children) === null || _a === void 0 ? void 0 : _a.length) {
                item.height = height;
                setThHeight(item.children, baseHeight, height);
            }
            else {
                const itRowNum = maxRowNum - Math.max(...flatColumns([item]).map(v => v.deep)) + 1;
                item.height = height * itRowNum;
            }
        }
        return;
    }
    if (maxRowNum <= 1)
        return;
    const maxHeight = baseHeight * maxRowNum;
    for (const item of columns) {
        if (!((_b = item.children) === null || _b === void 0 ? void 0 : _b.length)) {
            item.height = maxHeight;
        }
        else {
            const itRowNum = Math.max(...flatColumns([item]).map(v => v.deep));
            const height = maxHeight / itRowNum;
            item.height = height;
            setThHeight(item.children, baseHeight, height);
        }
    }
}

exports.Column = Column;
exports.flatColumns = flatColumns;
exports.genColumns = genColumns;
